# DOCKER CHEAT SHEET


########################################## BUILD docker ##########################################


# Docker build
docker build -t cl:sudo --no-cache . | tee ../cornucopia.log

# Docker inspect 
docker inspect -f "{{ .Config.Env }}" container_id

# Docker image ID
ID="$(docker images | grep 'cornucopia/life' | head -n 1 | awk '{print $3}')"

# Docker commit & rollback
docker history imagename
docker tag $ID{4 letters shortcut} imagename
docker tag ${IMAGE}:${VERSION} ${IMAGE}:latest


########################################## ADD USER in docker ##########################################


1) After BUILD with only root USER
RUN groupadd -r indiano && useradd -r -g indiano indiano
RUN groupadd -g 999 indiano && useradd -r -u 999 -g indiano indiano
groupadd -g 1000 indiano && useradd -r -u 1000 -g indiano indiano
USER indiano
COMMIT

2) USER keyword during IMAGE creation

3) ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["mongod"]

4) SUDO permission for user
RUN apt install -y sudo && \
    adduser user && \
    echo "user ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/user && \
    chmod 0440 /etc/sudoers.d/user
RUN su - user -c "touch mine"
CMD ["su", "-", "user", "-c", "/bin/bash"]


########################################## RUN docker ##########################################


# To avoid running the container as root by specifying user's user
docker run -u $(id -u):$(id -g)  # --user $UID:$UID, --user=$USER

# Bash shell session
docker run -u $(id -u):$(id -g) -it cornucopia/life:v2 bash

# GPU run check
docker run --gpus all -it --rm cl:sudo python -c "import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))"
docker run --gpus all -it --rm cornucopia/life:indie python -c "import tensorflow as tf; print(tf.config.experimental.list_physical_devices('GPU'))"

# nvidia-smi run
docker run --gpus all -it tensorflow/tensorflow:latest-gpu-jupyter nvidia-smi

# Jupyter lab run
docker run --gpus all -u $(id -u):$(id -g) -it -v $PWD:/tf -w /tf --net=host --expose 8888 -p 8888:8888 cornucopia/life:v2  # --net=host, --ipc=host
docker run --gpus all -it -v $PWD:/tf -w /tf --net=host --expose 8888 -p 8888:8888 cornucopia/life:v2

# Running docker exec in docker container
docker run -v /var/run/docker.sock:/var/run/docker.sock ...


########################################## COMMIT docker ##########################################


FROM commithash
CMD ["jupyter", "lab", "--no-browser", "--ip=127.0.0.1", "/tf"]

docker commit --change='CMD ["jupyter", "lab", "--no-browser", "--ip=127.0.0.1", "/tf"]' c021bb33120f cornucopia/life:useradd-cmd-commit

# ENTRYPOINT
docker commit --change='ENTRYPOINT ["myEntryPoint.sh"]' $(docker ps -lq)


########################################## MANAGE docker ##########################################


# Managing docker containers using Portainer management interface
docker volume create portainer_data 
docker run -d -p 127.0.0.1:8000:8000 -p 127.0.0.1:9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

# Removing All Unused Objects
# The docker system prune command will remove all stopped containers, all # dangling images, and all unused networks.
docker system prune
docker system prune --volumes  # remove all unused volumes


##################### CONTAINERS #####################


# Removing Docker Containers
docker container ls -a
docker container rm cc3f2ff51cab cd20b396a061

# Remove all stopped containers
# Get a list of all non-running (stopped) containers 
docker container ls -a --filter status=exited --filter status=created 
docker container prune  # -f or --force flag
docker container prune --filter "until=12h"  # Remove containers using filters until and label, more than one filter by using multiple --filter flags.

# Stop and remove all containers
docker container stop $(docker container ls -aq)
docker container rm $(docker container ls -aq)


##################### IMAGES #####################


# Removing Docker Images
docker image ls
docker image rm 75835a67d134 2a4cca5ac898

# Remove untagged images
docker rmi $(docker images | grep "^<none>" | awk "{print $3}")

# Remove dangling images
# A dangling image is an image that is not tagged and is not used by any container.
docker image prune  # to remove dangled and unused images, -f or --force flag to bypass the prompt.

# Remove all unused images
# To remove all images which are not referenced by any existing container, not just the dangling ones
docker image prune -a

# Remove images using filters
docker image prune -a --filter "until=12h"